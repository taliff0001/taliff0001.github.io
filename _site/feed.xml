<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-17T01:47:33-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Setting Up Python Virtual Environments on macOS</title><link href="http://localhost:4000/python/development/2024/12/16/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Setting Up Python Virtual Environments on macOS" /><published>2024-12-16T00:00:00-05:00</published><updated>2024-12-16T00:00:00-05:00</updated><id>http://localhost:4000/python/development/2024/12/16/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/python/development/2024/12/16/welcome-to-jekyll.html"><![CDATA[<p>When working with Python projects on macOS, it’s essential to use virtual environments to manage dependencies. Here are three common approaches to setting up virtual environments.</p>

<h2 id="using-venv-pythons-built-in-tool">Using venv (Python’s Built-in Tool)</h2>

<p>Python’s built-in <code class="language-plaintext highlighter-rouge">venv</code> module is the simplest option:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Create a new virtual environment</span>
python3 <span class="nt">-m</span> venv myenv

<span class="c"># Activate the environment</span>
<span class="nb">source </span>myenv/bin/activate

<span class="c"># Deactivate when done</span>
deactivate
</code></pre></div></div>

<h2 id="using-pyenv">Using pyenv</h2>

<p><code class="language-plaintext highlighter-rouge">pyenv</code> offers more flexibility in managing multiple Python versions:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install pyenv via Homebrew if not installed</span>
brew <span class="nb">install </span>pyenv

<span class="c"># Add to your shell configuration (~/.zshrc or ~/.bash_profile)</span>
<span class="nb">echo</span> <span class="s1">'eval "$(pyenv init --path)"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc

<span class="c"># Install a specific Python version</span>
pyenv <span class="nb">install </span>3.11.0

<span class="c"># Set global Python version</span>
pyenv global 3.11.0

<span class="c"># Set local Python version for current directory</span>
pyenv <span class="nb">local </span>3.11.0

<span class="c"># Create virtual environment with pyenv-virtualenv</span>
pyenv virtualenv 3.11.0 myenv

<span class="c"># Activate the environment</span>
pyenv activate myenv

<span class="c"># Deactivate</span>
pyenv deactivate
</code></pre></div></div>

<h2 id="using-conda">Using conda</h2>

<p>Conda is particularly useful for data science projects:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Miniconda if not installed</span>
brew <span class="nb">install</span> <span class="nt">--cask</span> miniconda

<span class="c"># Initialize conda for your shell</span>
conda init zsh  <span class="c"># or bash if using bash</span>

<span class="c"># Create new environment</span>
conda create <span class="nt">--name</span> myenv <span class="nv">python</span><span class="o">=</span>3.11

<span class="c"># Activate the environment</span>
conda activate myenv

<span class="c"># Deactivate</span>
conda deactivate
</code></pre></div></div>

<p>After activating any of these environments, you can install packages using pip:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>package_name
</code></pre></div></div>

<p>Each approach has its merits: <code class="language-plaintext highlighter-rouge">venv</code> is built into Python and perfect for simple projects, <code class="language-plaintext highlighter-rouge">pyenv</code> excels at managing multiple Python versions, and <code class="language-plaintext highlighter-rouge">conda</code> is ideal for data science work with complex dependencies.</p>]]></content><author><name></name></author><category term="python" /><category term="development" /><category term="python" /><category term="virtualenv" /><category term="pyenv" /><category term="conda" /><category term="macos" /><summary type="html"><![CDATA[When working with Python projects on macOS, it’s essential to use virtual environments to manage dependencies. Here are three common approaches to setting up virtual environments.]]></summary></entry></feed>